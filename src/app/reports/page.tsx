'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { 
  Shield, 
  ArrowLeft, 
  FileText, 
  Calendar, 
  Search,
  Filter,
  Download,
  Share2,
  Trash2,
  Eye,
  CheckCircle,
  XCircle,
  AlertCircle,
  Clock
} from 'lucide-react';
import { useAuth } from '@/lib/simple-auth-context';
import ProtectedRoute from '@/components/protected-route';

interface VerificationReport {
  id: string;
  timestamp: Date | string;
  type: string;
  content: string;
  overallCredibility: string;
  claims: any[];
  summary: string;
  userId: string;
  analysisType: string;
  claimsFound: number;
}

function ReportsContent() {
  const { user } = useAuth();
  const router = useRouter();
  const [reports, setReports] = useState<VerificationReport[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [typeFilter, setTypeFilter] = useState('all');
  const [sortBy, setSortBy] = useState('newest');

  useEffect(() => {
    loadReports();
  }, [user]);

  const loadReports = () => {
    try {
      const savedReports = JSON.parse(localStorage.getItem('verificationReports') || '[]');
      // Filter reports for current user
      const userReports = savedReports.filter((report: VerificationReport) => 
        report.userId === user?.uid
      );
      
      // Convert timestamp strings back to Date objects
      const reportsWithDates = userReports.map((report: VerificationReport) => ({
        ...report,
        timestamp: typeof report.timestamp === 'string' ? new Date(report.timestamp) : report.timestamp
      }));
      
      setReports(reportsWithDates);
    } catch (error) {
      console.error('Error loading reports:', error);
      setReports([]);
    } finally {
      setLoading(false);
    }
  };

  const filteredReports = reports.filter(report => {
    const matchesSearch = report.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         report.summary.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = typeFilter === 'all' || report.type === typeFilter;
    return matchesSearch && matchesType;
  }).sort((a, b) => {
    const dateA = new Date(a.timestamp).getTime();
    const dateB = new Date(b.timestamp).getTime();
    
    switch (sortBy) {
      case 'newest':
        return dateB - dateA;
      case 'oldest':
        return dateA - dateB;
      default:
        return dateB - dateA;
    }
  });

  const handleDeleteReport = (reportId: string) => {
    if (confirm('Are you sure you want to delete this report?')) {
      try {
        const savedReports = JSON.parse(localStorage.getItem('verificationReports') || '[]');
        const updatedReports = savedReports.filter((report: VerificationReport) => report.id !== reportId);
        localStorage.setItem('verificationReports', JSON.stringify(updatedReports));
        loadReports();
      } catch (error) {
        console.error('Error deleting report:', error);
        alert('Failed to delete report. Please try again.');
      }
    }
  };

  const handleExportReport = (report: VerificationReport) => {
    try {
      let reportText = `VERIFICATION REPORT\n`;
      reportText += `Generated: ${new Date(report.timestamp).toLocaleString()}\n`;
      reportText += `Content Type: ${report.type.toUpperCase()}\n`;
      reportText += `Overall Credibility: ${report.overallCredibility}\n\n`;

      if (report.summary) {
        reportText += `SUMMARY:\n${report.summary}\n\n`;
      }

      reportText += `CONTENT ANALYZED:\n"${report.content}"\n\n`;

      if (report.claims && report.claims.length > 0) {
        reportText += `EXTRACTED CLAIMS (${report.claims.length} found):\n\n`;
        
        report.claims.forEach((claim: any, index: number) => {
          reportText += `CLAIM ${index + 1}: ${claim.status?.toUpperCase() || 'UNKNOWN'}\n`;
          reportText += `Text: "${claim.text}"\n`;
          reportText += `Credibility: ${claim.confidence}%\n`;
          
          if (claim.type) {
            reportText += `Type: ${claim.type}\n`;
          }
          
          if (claim.explanation || claim.detailedExplanation) {
            reportText += `Analysis: ${claim.detailedExplanation || claim.explanation}\n`;
          }

          reportText += `\n`;
        });
      }

      reportText += `\n---\nReport generated by MisInfo Combat Pro`;

      const blob = new Blob([reportText], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `verification-report-${report.id}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error exporting report:', error);
      alert('Failed to export report. Please try again.');
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'verified':
        return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'unverified':
        return <XCircle className="w-4 h-4 text-red-600" />;
      case 'partial':
        return <AlertCircle className="w-4 h-4 text-yellow-600" />;
      default:
        return <AlertCircle className="w-4 h-4 text-gray-600" />;
    }
  };

  const getCredibilityColor = (credibility: string) => {
    if (credibility.includes('High')) return 'text-green-600 bg-green-50';
    if (credibility.includes('Medium')) return 'text-yellow-600 bg-yellow-50';
    if (credibility.includes('Low') || credibility.includes('Very Low')) return 'text-red-600 bg-red-50';
    return 'text-gray-600 bg-gray-50';
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading reports...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <Link
                href="/verifier"
                className="flex items-center text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowLeft className="w-5 h-5 mr-2" />
                <span>Back to Verifier</span>
              </Link>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <FileText className="w-5 h-5 text-blue-600" />
                <h1 className="text-xl font-semibold text-gray-900">Verification Reports</h1>
              </div>
            </div>

            <div className="flex items-center space-x-3">
              <Link
                href="/verifier"
                className="flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
              >
                <Shield className="w-4 h-4" />
                <span>New Verification</span>
              </Link>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filters */}
        <div className="bg-white rounded-lg border border-gray-200 p-6 mb-6">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search reports..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white"
                />
              </div>
            </div>
            
            <div className="flex gap-3">
              <select
                value={typeFilter}
                onChange={(e) => setTypeFilter(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white"
              >
                <option value="all">All Types</option>
                <option value="text">Text</option>
                <option value="url">URL</option>
                <option value="image">Image</option>
                <option value="video">Video</option>
              </select>
              
              <select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-gray-900 bg-white"
              >
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
              </select>
            </div>
          </div>
        </div>

        {/* Reports List */}
        {filteredReports.length === 0 ? (
          <div className="bg-white rounded-lg border border-gray-200 p-12 text-center">
            <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 mb-2">No Reports Found</h3>
            <p className="text-gray-600 mb-6">
              {reports.length === 0 
                ? "You haven't created any verification reports yet." 
                : "No reports match your current search criteria."
              }
            </p>
            <Link
              href="/verifier"
              className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg inline-flex items-center space-x-2 transition-colors"
            >
              <Shield className="w-4 h-4" />
              <span>Create Your First Report</span>
            </Link>
          </div>
        ) : (
          <div className="space-y-4">
            {filteredReports.map((report) => (
              <div key={report.id} className="bg-white rounded-lg border border-gray-200 p-6">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-2">
                      <span className={`px-3 py-1 rounded-full text-xs font-medium ${getCredibilityColor(report.overallCredibility)}`}>
                        {report.overallCredibility}
                      </span>
                      <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded text-xs font-medium capitalize">
                        {report.type}
                      </span>
                      <div className="flex items-center space-x-1 text-sm text-gray-600">
                        <Calendar className="w-4 h-4" />
                        <span>{new Date(report.timestamp).toLocaleDateString()}</span>
                      </div>
                    </div>
                    
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      {report.summary || 'Verification Analysis'}
                    </h3>
                    
                    <p className="text-gray-600 mb-4">
                      {report.content.length > 150 
                        ? `${report.content.substring(0, 150)}...` 
                        : report.content
                      }
                    </p>

                    {report.claims && report.claims.length > 0 && (
                      <div className="flex items-center space-x-4 mb-3">
                        <span className="text-sm font-medium text-gray-700">
                          Claims Found: {report.claimsFound || report.claims.length}
                        </span>
                        <div className="flex items-center space-x-2">
                          {report.claims.slice(0, 3).map((claim: any, index: number) => (
                            <div key={index} className="flex items-center space-x-1">
                              {getStatusIcon(claim.status)}
                              <span className="text-xs text-gray-600">
                                {claim.status?.toUpperCase()}
                              </span>
                            </div>
                          ))}
                          {report.claims.length > 3 && (
                            <span className="text-xs text-gray-500">
                              +{report.claims.length - 3} more
                            </span>
                          )}
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="flex items-center space-x-2 ml-4">
                    <button
                      onClick={() => handleExportReport(report)}
                      className="p-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                      title="Export Report"
                    >
                      <Download className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => handleDeleteReport(report.id)}
                      className="p-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                      title="Delete Report"
                    >
                      <Trash2 className="w-4 h-4" />
                    </button>
                  </div>
                </div>

                {/* Claims Preview */}
                {report.claims && report.claims.length > 0 && (
                  <details className="mt-4">
                    <summary className="cursor-pointer text-sm font-medium text-blue-600 hover:text-blue-700">
                      View Claims Details
                    </summary>
                    <div className="mt-3 space-y-3">
                      {report.claims.map((claim: any, index: number) => (
                        <div key={index} className="border border-gray-200 rounded p-3 bg-gray-50">
                          <div className="flex items-start space-x-2 mb-2">
                            {getStatusIcon(claim.status)}
                            <div className="flex-1">
                              <p className="text-sm font-medium text-gray-900">
                                Claim {index + 1}: {claim.status?.toUpperCase()}
                              </p>
                              <p className="text-sm text-gray-700 italic">"{claim.text}"</p>
                              <p className="text-xs text-gray-600 mt-1">
                                Credibility: {claim.confidence}%
                              </p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </details>
                )}
              </div>
            ))}
          </div>
        )}

        {/* Summary Stats */}
        {reports.length > 0 && (
          <div className="mt-8 bg-white rounded-lg border border-gray-200 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Report Statistics</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">{reports.length}</div>
                <div className="text-sm text-gray-600">Total Reports</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  {reports.reduce((acc, report) => acc + (report.claimsFound || report.claims?.length || 0), 0)}
                </div>
                <div className="text-sm text-gray-600">Claims Analyzed</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">
                  {Math.round(reports.filter(r => r.type === 'text').length / reports.length * 100) || 0}%
                </div>
                <div className="text-sm text-gray-600">Text Analysis</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-600">
                  {reports.length > 0 ? Math.round((Date.now() - new Date(reports[reports.length - 1].timestamp).getTime()) / (1000 * 60 * 60 * 24)) : 0}
                </div>
                <div className="text-sm text-gray-600">Days Since First</div>
              </div>
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default function ReportsPage() {
  return (
    <ProtectedRoute>
      <ReportsContent />
    </ProtectedRoute>
  );
}
